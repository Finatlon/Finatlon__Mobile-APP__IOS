//
//  ContentView.swift
//  Finatlon
//
//  Created by –î–º–∏—Ç—Ä–∏–π –ö–∞–Ω—Å–∫–∏–π on 11.12.2022.
//

import SwiftUI
import iPhoneNumberField

struct ContentView: View {
    @State var CurrentScreen = 2
    var body: some View {
        switch CurrentScreen {
        case 0:
            LoginView(CurrentScreen: $CurrentScreen)
        case 1:
            MainView()
        case 2:
            RegisterView(CurrentScreen: $CurrentScreen)
        default:
            LoginView(CurrentScreen: $CurrentScreen)
        }
    }
}

struct LoginView: View {
    @State private var username: String = ""
    @State private var password: String = ""
    @Binding var CurrentScreen: Int
    
    var body: some View {
        VStack(alignment: .center, spacing: 20.0) {
            Text("–§–∏–Ω–∞—Ç–ª–æ–Ω").font(.title)
            TextField("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (email)", text: $username).textContentType(.emailAddress)
            SecureField(text: $password, prompt: Text("–ü–∞—Ä–æ–ª—å")) {Text("–ø–∞—Ä–æ–ª—å")}.textContentType(.password)
            Button("–í–æ–π—Ç–∏", action: {self.CurrentScreen = 1}).buttonStyle(.borderedProminent)
            Button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", action: {self.CurrentScreen = 2})
        }.textFieldStyle(.roundedBorder)
            .padding()
    }
}

struct MainView: View {
    var body: some View {
        Text("–í—ã –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç")
    }
}

struct RegisterView: View {
    @Binding var CurrentScreen: Int
    @State private var lastname: String = ""
    @State private var givenname: String = ""
    @State private var middlename: String = ""
    @State private var password: String = ""
    @State private var dob: Date = Date.now
    @State private var phone: String = ""
    var body: some View {
        NavigationView {
        VStack(alignment: .center, spacing: 20.0) {
            //Text("–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ").font(.title)
            VStack(alignment: .leading) {
                Text("–§–∞–º–∏–ª–∏—è")
                TextField("–§–∞–º–∏–ª–∏—è", text: $lastname)
                    .textContentType(.familyName)
                Text("–ò–º—è")
                TextField("–ò–º—è", text: $givenname).textContentType(.givenName)
                Text("–û—Ç—á–µ—Å—Ç–≤–æ")
                TextField("–û—Ç—á–µ—Å—Ç–≤–æ", text: $middlename).textContentType(.familyName)
                DatePicker("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", selection: $dob, displayedComponents: [.date])
                Text("–¢–µ–ª–µ—Ñ–æ–Ω")
                iPhoneNumberField(nil, text: $phone).defaultRegion("RU")
                    .flagHidden(false)
                    .flagSelectable(true)
                    .prefixHidden(false)
            }.textFieldStyle(.roundedBorder).padding()
            HStack(alignment: .center) {
                Button("–ù–∞–∑–∞–¥", action: {self.CurrentScreen = 0})
                    .padding(.trailing)
                            NavigationLink {
                                Register2()
                            } label: {
                                Text("–î–∞–ª–µ–µ")
                            }.navigationTitle("–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    .padding(.leading).buttonStyle(.borderedProminent)
                        }
            }
        }
    }
}

struct Register2: View {
    @State private var coutry: String = ""
    @State private var fed_district: String = ""
    @State private var region: String = ""
    @State private var postal_code: String = ""
    var body: some View {
        VStack(alignment: .leading, spacing: 20.0) {
            HStack() {
                Text("–°—Ç—Ä–∞–Ω–∞")
                Spacer()
                Picker("", selection: $coutry) {
                    Text("–†–æ—Å—Å–∏—è").tag("–†–æ—Å—Å–∏—è")
                    Text("–ù–µ –†–æ—Å—Å–∏—è").tag("–ù–µ –†–æ—Å—Å–∏—è")
                    Text("–Æ–ø–∏—Ç–µ—Ä").tag("–Æ–ø–∏—Ç–µ—Ä")
                    Text("???").tag("???")
                    Text("–ü–∞—Ä–∞–≥–≤–∞–π").tag("–ü–∞—Ä–∞–≥–≤–∞–π")
                }
            }
            HStack() {
                Text("–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥")
                Spacer()
                Picker("", selection: $fed_district) {
                    Text("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π").tag("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π")
                    Text("–ù–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π").tag("–ù–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π")
                    Text("–ü–ª—É—Ç–æ–Ω").tag("–ü–ª—É—Ç–æ–Ω")
                    Text("???").tag("???")
                    Text("–ì–¥–µ-—Ç–æ").tag("–ì–¥–µ-—Ç–æ")
                }
            }
            HStack() {
                Text("–°—É–±—ä–µ–∫—Ç –†–§").padding(.trailing)
                Spacer()
                Picker("", selection: $region) {
                    Text("–ú–æ—Å–∫–≤–∞").tag("–ú–æ—Å–∫–≤–∞")
                    Text("–ù–µ –ú–æ—Å–∫–≤–∞ üò±").tag("–ù–µ –ú–æ—Å–∫–≤–∞ üò±")
                    Text("–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å").tag("–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å")
                    Text("???").tag("???")
                    Text("–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –û–∫—Ä—É–≥ ‚Äî –Æ–≥—Ä–∞").tag("–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –û–∫—Ä—É–≥ ‚Äî –Æ–≥—Ä–∞")
                }
            }
            Text("–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å")
            TextField("–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å", text: $postal_code)
                .textContentType(.postalCode)
        }.textFieldStyle(.roundedBorder)
        .padding()
        NavigationLink {
            Register3()
        } label: {Text("–î–∞–ª–µ–µ")}
        .navigationTitle("–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è")
        .buttonStyle(.borderedProminent)
    }
}

struct Register3: View {
    @State private var town_type: String = ""
    @State private var town: String = ""
    @State private var str: String = ""
    @State private var bld: String = ""
    @State private var apt: String = ""
    @State private var is_village: Bool = false
    var body: some View {
        VStack(alignment: .leading, spacing: 20.0) {
            HStack() {
                Text("–¢–∏–ø –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞")
                Spacer()
                Picker("", selection: $town_type) {
                    Text("–ì–æ—Ä–æ–¥").tag("–ì–æ—Ä–æ–¥")
                    Text("–ü–ì–¢").tag("–ü–ì–¢")
                    Text("???").tag("???")
                }
            }
            HStack() {
                Text("–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç")
                Spacer()
                Picker("", selection: $town) {
                    Text("–ú–æ—Å–∫–≤–∞").tag("–ú–æ—Å–∫–≤–∞")
                    Text("–ì–æ—Ä–æ–¥").tag("–ì–æ—Ä–æ–¥")
                    Text("–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥").tag("–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")
                    Text("–ì–æ—Ä–æ–¥ N").tag("–ì–æ—Ä–æ–¥ N")
                }
            }
            Text("–ê–¥—Ä–µ—Å –º–µ—Å—Ç–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞")
            TextField("–£–ª–∏—Ü–∞", text: $str).textContentType(.addressCity)
            HStack() {
                TextField("–î–æ–º", text: $bld).textContentType(.streetAddressLine1)
                TextField("–ö–≤–∞—Ä—Ç–∏—Ä–∞", text: $apt).textContentType(.streetAddressLine1)
            }
            Toggle("–Ø–≤–ª—è—é—Å—å –∂–∏—Ç–µ–ª–µ–º —Å–µ–ª—å—Å–∫–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏", isOn: $is_village)
        }.textFieldStyle(.roundedBorder).padding()
        NavigationLink {
            Register4()
        } label: {Text("–î–∞–ª–µ–µ")}
        .navigationTitle("–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è")
        .buttonStyle(.borderedProminent)
    }
}

struct Register4: View {
    var body: some View {
        VStack(alignment: .leading, spacing: 20.0) {
            
        }.textFieldStyle(.roundedBorder).padding()
        NavigationLink {
            MainView()
        } label: {Text("–î–∞–ª–µ–µ")}
        .navigationTitle("–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è")
        .buttonStyle(.borderedProminent)
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
